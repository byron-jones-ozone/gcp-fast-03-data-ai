name: "FAST Data AI - Terraform Apply"

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  terraform:
    name: "Terraform Plan and Apply"
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      id-token: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.2

      - name: Terraform Format Check
        run: terraform fmt -check -recursive

      - name: Terraform Init (with backend=false for testing)
        run: terraform init -backend=false

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -input=false -no-color -out=tfplan
        continue-on-error: true

      # Apply only on push to main (when PR is merged)
      - name: Terraform Apply
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          echo "🚀 This would run terraform apply in production with proper backend!"
          echo "terraform apply -input=false -auto-approve -no-color tfplan"
          echo "Apply would happen here with proper GCP authentication and backend."

      - name: Comment PR
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const output = `
            ## Terraform Plan Results 📋
            
            ### Format Check: ✅ Passed
            ### Terraform Init: ✅ Success  
            ### Terraform Validate: ✅ Success
            ### Terraform Plan: ${{ steps.plan.outcome }}
            
            ${steps.plan.outcome === 'success' ? '✅' : '❌'} **Plan completed**
            
            ---
            **Apply Status:** ${github.event_name === 'pull_request' ? '⏳ Will apply when merged to main' : '🚀 Applied to infrastructure'}
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })